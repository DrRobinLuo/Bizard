[
  {
    "objectID": "Distribution/BoxPlot.html",
    "href": "Distribution/BoxPlot.html",
    "title": "Box Plot",
    "section": "",
    "text": "Boxplots visualize the central tendency and dispersion of one or more sets of continuous quantitative data. They incorporate statistical measures that not only compare differences across categories but also reveal dispersion, outliers, and distribution patterns.\nA boxplot is defined by five key lines: the upper boundary, upper quartile, median, lower quartile, and lower boundary. Points beyond the upper or lower boundary are considered outliers.",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#example",
    "href": "Distribution/BoxPlot.html#example",
    "title": "Box Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#setup",
    "href": "Distribution/BoxPlot.html#setup",
    "title": "Box Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nPackages: ggplot2, dplyr, hrbrthemes, viridis, ggExtra, ggpubr, rstatix, ggtext, ggpmisc\n\n\n# Installing necessary packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"rstatix\", quietly = TRUE)) {\n  install.packages(\"rstatix\")\n}\nif (!requireNamespace(\"ggtext\", quietly = TRUE)) {\n  install.packages(\"ggtext\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\n\n\n# Loading the libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(ggpubr)\nlibrary(rstatix)\nlibrary(ggtext)\nlibrary(ggpmisc)\nlibrary(ggExtra)",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#data-preparation",
    "href": "Distribution/BoxPlot.html#data-preparation",
    "title": "Box Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (mtcars), data from ggplot2 package (mpg, diamonds) and the TCGA-BRCA.htseq_counts.tsv dataset from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load mtcars dataset\ndata(\"mtcars\")\ndata_mtcars &lt;- mtcars\n\n# Load mpg dataset from ggplot2 package\ndata_mpg &lt;- ggplot2::mpg\n\n# Load diamonds dataset from ggplot2 package\ndata_diamonds &lt;- ggplot2::diamonds\n\n# Load the TCGA-BRCA gene expression dataset from a processed CSV file  \ndata_TCGA &lt;- read.csv(\"https://raw.githubusercontent.com/DrRobinLuo/Bizard/refs/heads/main/files/TCGA-BRCA.htseq_counts_processed.csv\")\ndata_TCGA1 &lt;- data_TCGA[1:5,] %&gt;%\n  gather(key = \"sample\",value = \"gene_expression\",3:1219)",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#visualization",
    "href": "Distribution/BoxPlot.html#visualization",
    "title": "Box Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plotting\n\nBasic Plotting\nThe ggplot2 package allows the use of geom_boxplot() to create a basic boxplot.\nTaking the TCGA-BRCA.htseq_counts.tsv dataset as an example:\n\nggplot(data_TCGA1, aes(x=as.factor(gene_name), y=gene_expression)) + \n  geom_boxplot(fill=\"slateblue\", alpha=0.2) + # color fill and font size\n  xlab(\"gene_name\") # x-axis label\n\n\n\n\n\n\n\n\n\n\nParameter Adjustment\nTaking the mtcars dataset as an example:\n\nggplot(data_mtcars, aes(x=as.factor(cyl), y=mpg)) + \n  geom_boxplot(\n    # box\n    color=\"blue\",\n    fill=\"blue\",\n    alpha=0.2,\n    # notch\n    notch=TRUE,\n    notchwidth = 0.8,\n    # outliers\n    outlier.colour=\"red\",\n    outlier.fill=\"red\",\n    outlier.size=3\n  ) + \n  xlab(\"cyl\")\n\n\n\n\n\n\n\n\n\n\nColor Settings\nTaking the mpg dataset as an example, several common color scales for boxplots are demonstrated:\n\nggplot(data_mpg, aes(x=class, y=hwy)) + \n  geom_boxplot(color=\"red\", fill=\"orange\", alpha=0.2)\n\n\n\n\n\n\n\n\n\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(alpha=0.3) +\n  theme(legend.position=\"none\")\n\n\n\n\n\n\n\n\n\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(alpha=0.3) +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\nGroup Highlighting\nTaking the mpg dataset as an example, different colors are set for groups that need to be highlighted:\n\ndata_mpg %&gt;% \n  # add highlighted group, create color vector\n  mutate(type=ifelse(class==\"subcompact\",\"Highlighted\",\"Normal\")) %&gt;%\n  # fill=type, map the color vector to the boxplot\n  ggplot(aes(x=class, y=hwy, fill=type, alpha=type)) + \n  geom_boxplot() +\n  scale_fill_manual(values=c(\"#69b3a2\", \"grey\")) +\n  scale_alpha_manual(values=c(1,0.1)) +\n  theme_ipsum() +\n  theme(legend.position = \"none\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n2. Variable Width Boxplot\nThe basic boxplot does not display the sample size information of categories. We can draw a variable width boxplot where the box width is proportional to the sample size by using the varwidth parameter.\n\nnames &lt;- c(rep(\"A\", 20) , rep(\"B\", 5) , rep(\"C\", 30), rep(\"D\", 100))\nvalue &lt;- c(sample(2:5, 20 , replace=T) , sample(4:10, 5 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 100 , replace=T))\ndata &lt;- data.frame(names,value)\n# create corresponding x-axis labels\nmy_xlab &lt;- paste(levels(data$names),\"\\n(N=\",table(data$names),\")\",sep=\"\")\n\n# plotting\nggplot(data, aes(x=names, y=value, fill=names)) +\n  geom_boxplot(varwidth = TRUE, alpha=0.2) + # varwidth = TRUE achieves width proportional to sample size\n  theme(legend.position=\"none\") +\n  scale_x_discrete(labels=my_xlab)\n\n\n\n\n\n\n\n\nTaking the mpg dataset as an example again:\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(varwidth = TRUE,alpha=0.3) +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\n3. Boxplot for Continuous Variables\nFor continuous variables, we can use the cut_width() function to divide the continuous variable into intervals and then draw the boxplot.\nTaking the diamonds dataset as an example:\n\ndata_diamonds %&gt;%\n  # create a new variable, divide the continuous variable into intervals (0.5 as one interval)\n  mutate(bin=cut_width(carat, width=0.5, boundary=0)) %&gt;%\n  # plotting, use the divided intervals as x\n  ggplot(aes(x=bin, y=price)) +\n  geom_boxplot(fill=\"#69b3a2\") +\n  theme_ipsum() +\n  xlab(\"Carat\")\n\n\n\n\n\n\n\n\n\n\n4. Boxplot with Mean Values\nThe basic boxplot displays the median for each group. We can also use the stat_summary() function to add the mean value for each group to the boxplot.\n\nnames=c(rep(\"A\", 20) , rep(\"B\", 8) , rep(\"C\", 30), rep(\"D\", 80))\nvalue=c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) )\ndata=data.frame(names,value)\n# Plotting\np &lt;- ggplot(data, aes(x=names, y=value, fill=names)) +\n  geom_boxplot(alpha=0.7) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=20, size=14, color=\"white\", fill=\"white\") +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Set1\")\np\n\n\n\n\n\n\n\n\nUsing the mpg dataset as an example again\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(varwidth = TRUE,alpha=0.3) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=10, size=5, color=\"black\", fill=\"black\") +\n  # fun.y specifies the type of statistic to add, geom specifies the type of geometric object, shape specifies the shape of the point, and size specifies the size\n\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\n5. Scatter Boxplot & Violin Plot\n\nScatter Boxplot\nBoxplots are often used to compare the distributions of multiple groups, but they do not show the specific distribution of the data (for example, it is impossible to determine whether the distribution is normal or bimodal from a boxplot). We can use the geom_jitter() function to add individual observations, allowing us to see the specific distribution of each group.\n\ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n)\n\n\ndata %&gt;%\n  ggplot( aes(x=name, y=value, fill=name)) +\n  geom_boxplot() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6) +\n  geom_jitter(color=\"black\", size=0.4, alpha=0.9) + # Plotting scatter points\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"A boxplot with jitter\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\nViolin Plot\nViolin plots combine the features of boxplots and density distribution plots, also showing the specific distribution of observations within groups.\n\ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n)\n\ndata %&gt;%\n  ggplot( aes(x=name, y=value, fill=name)) +\n  geom_violin() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6, option=\"A\") +\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"Violin chart\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n6. Grouped Boxplot\nOn the basis of single-group comparison, we can use the fill parameter to draw grouped boxplots, which facilitates comparisons both between and within groups.\n\nvariety=rep(LETTERS[1:4], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:160)+sample(1:150, 160, replace=T)\ndata=data.frame(variety, treatment ,  note)\n\n# Plotting\nggplot(data, aes(x=variety, y=note, fill=treatment)) + # The fill parameter adds grouping\n  geom_boxplot()\n\n\n\n\n\n\n\n\nAdding statistics analysis:\n\nvariety=rep(LETTERS[1:4], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:160)+sample(1:150, 160, replace=T)\ndata=data.frame(variety, treatment ,  note)\n\n# Difference test\n# Within groups\ndf &lt;- data\ndf$variety &lt;- factor(df$variety)\ndf_p_val1 &lt;- df %&gt;% \n  group_by(variety) %&gt;% \n  wilcox_test(formula = note~treatment) %&gt;% \n  add_significance(p.col = 'p',cutpoints = c(0,0.001,0.01,0.05,1),symbols = c('***','**','*','ns')) %&gt;% \n  add_xy_position(x='variety')\n# Between groups\ndf_p_val2 &lt;- df %&gt;% \n  wilcox_test(formula = note~variety) %&gt;% \n  add_significance(p.col = 'p',cutpoints = c(0,0.001,0.01,0.05,1),symbols = c('***','**','*','ns')) %&gt;% \n  add_xy_position()\n\n\n# Plotting\nggplot()+\n  geom_boxplot(data = df,mapping = aes(x=variety, y=note, fill=treatment),width=0.5)+\n  stat_pvalue_manual(df_p_val1,label = '{p.signif}',\n                     tip.length = 0)+\n  stat_pvalue_manual(df_p_val2,label = '{p.signif}',\n                     tip.length = 0.01,\n                     y.position = df_p_val2$y.position+0.5)+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.7,0.1),\n        legend.direction = 'horizontal')\n\n\n\n\n\n\n\n\n\nIn addition to grouped boxplots, we can also draw boxplots for each subgroup separately for comparison.\n\nvariety=rep(LETTERS[1:7], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:280)+sample(1:150, 280, replace=T)\ndata1=data.frame(variety, treatment ,  note)\n# treatment as the basis\np1 &lt;- ggplot(data1, aes(x=variety, y=note, fill=treatment)) + \n  geom_boxplot() +\n    facet_wrap(~treatment, scale=\"free\")+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.9,0.1),\n        legend.direction = 'horizontal')\np1\n\n\n\n\n\n\n\n\n\n# variety as the basis\np2 &lt;- ggplot(data1, aes(x=variety, y=note, fill=treatment)) + \n  geom_boxplot() +\n  facet_wrap(~variety, scale=\"free\")+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.9,-0.05),\n        legend.direction = 'horizontal')\np2\n\n\n\n\n\n\n\n\n\n\n7. Adding Marginal Distributions to Boxplots\nAdding marginal distributions on the X and Y axes is a common visualization method. We can achieve this using the ggExtra package. Here, we mainly introduce the addition of marginal distributions to boxplots.\nTaking the mtcars dataset as an example:\n\n# Original scatter plot\np1&lt;-ggplot(data_mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl))+\n  geom_point()+\n  theme_bw()+ \n  geom_smooth(method = 'lm', formula = y~x, se = TRUE, show.legend = FALSE) + \n  stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., stat(p.value.label), sep = '~`,`~')),\n               formula = y~x, parse = TRUE, npcx= 'left', npcy= 'bottom', size = 4)\n\np1\n\n\n\n\n\n\n\n\n\n# Adding marginal boxplot distributions\np1 &lt;- ggMarginal(p1, type=\"boxplot\")\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe main customizable parameters of ggMarginal() are:\n\nsize to change the size of the marginal plot\nAll common appearance customization parameters\nmargins = 'x' or margins = 'y' to display only one marginal plot",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#application",
    "href": "Distribution/BoxPlot.html#application",
    "title": "Box Plot",
    "section": "Application",
    "text": "Application\n\n1. Basic Boxplot\n\n\n\n\n\n\nFigure 1: Applications of Basic Boxplot\n\n\n\nFigure E: Fab-PLA results quantified using BlobFinder software and presented in the form of a boxplot. The median is highlighted with a thick line, and the whiskers represent the minimum and maximum values. It shows the distribution of PLA signal quantification data for each group of cells.[1]\n\n\n2. Highlighted Boxplot\n\n\n\n\n\n\nFigure 2: Applications of Highlighted Boxplot\n\n\n\nFigure B: Boxplot of probe distance distribution.\nFigure D & Figure F: Boxplots of the maximum nuclear cross-sectional area distribution in H2A-overexpressing cells in MDA-MB-453 (D) or HEK293 (F). Groups with significant differences are highlighted.[2]\n\n\n3. Grouped Boxplot\n\n\n\n\n\n\nFigure 3: Applications of Grouped Boxplot\n\n\n\nFigure C: Boxplot of genome size for organisms with H2A that does or does not contain the shown residues.[2]",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#reference",
    "href": "Distribution/BoxPlot.html#reference",
    "title": "Box Plot",
    "section": "Reference",
    "text": "Reference\n[1] Volkmann C, Brings N, Becker M, Hobeika E, Yang J, Reth M. Molecular requirements of the B-cell antigen receptor for sensing monovalent antigens. EMBO J. 2016 Nov 2;35(21):2371-2381. doi: 10.15252/embj.201694177. Epub 2016 Sep 15. PMID: 27634959; PMCID: PMC5090217.\n[2] Macadangdang BR, Oberai A, Spektor T, Campos OA, Sheng F, Carey MF, Vogelauer M, Kurdistani SK. Evolution of histone 2A for chromatin compaction in eukaryotes. Elife. 2014 Jun 17;3:e02792. doi: 10.7554/eLife.02792. PMID: 24939988; PMCID: PMC4098067.\n[3] H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\n[4] Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.4, https://CRAN.R-project.org/package=dplyr.\n[5] Rudis B (2024). hrbrthemes: Additional Themes, Theme Components and Utilities for ‘ggplot2’. R package version 0.8.7, https://CRAN.R-project.org/package=hrbrthemes.\n[6] Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” Journal of Open Source Software, 4(43), 1686. doi:10.21105/joss.01686 https://doi.org/10.21105/joss.01686.\n[7] Simon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2024). viridis(Lite) - Colorblind-Friendly Color Maps for R. viridis package version 0.6.5.\n[8] Attali D, Baker C (2023). ggExtra: Add Marginal Histograms to ‘ggplot2’, and More ‘ggplot2’ Enhancements. R package version 0.10.1, https://CRAN.R-project.org/package=ggExtra.",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "GraphGallery.html",
    "href": "GraphGallery.html",
    "title": "Graph Gallery",
    "section": "",
    "text": "👋 Bizard is a comprehensive repository of advanced visualization codes tailored for biomedical research.\nThe toolkit includes a diverse array of charting options, from variable distributions to interactive visualizations, systematically organized to meet the unique needs of biomedical data analysis. Built on a robust foundation, each example is paired with reproducible R code, detailed annotations, and real-world datasets to ensure accessibility and practical application.\nWith resources for both beginners and seasoned researchers, Bizard empowers users to create intuitive, scientifically rigorous, and visually compelling outputs, advancing data visualization standards in the biomedical field.",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#under-construction-demo-only",
    "href": "GraphGallery.html#under-construction-demo-only",
    "title": "Graph Gallery",
    "section": "UNDER CONSTRUCTION [DEMO ONLY]",
    "text": "UNDER CONSTRUCTION [DEMO ONLY]",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#distribution-gallery",
    "href": "GraphGallery.html#distribution-gallery",
    "title": "Graph Gallery",
    "section": "Distribution Gallery",
    "text": "Distribution Gallery\n\n\n\nDistribution DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#correlation-gallery",
    "href": "GraphGallery.html#correlation-gallery",
    "title": "Graph Gallery",
    "section": "Correlation Gallery",
    "text": "Correlation Gallery\n\n\n\nCorrelation DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#ranking-gallery",
    "href": "GraphGallery.html#ranking-gallery",
    "title": "Graph Gallery",
    "section": "Ranking Gallery",
    "text": "Ranking Gallery\n\n\n\nRanking DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#others",
    "href": "GraphGallery.html#others",
    "title": "Graph Gallery",
    "section": "Others",
    "text": "Others",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bizard",
    "section": "",
    "text": "Data visualization is a critical tool in biomedical research, enabling intuitive interpretation of complex datasets to advance scientific discovery and inform clinical decisions. The R programming language, with its powerful statistical capabilities and extensive package ecosystem, has become a cornerstone for creating high-quality visualizations. However, the vast and ever-evolving landscape of R plotting packages often poses challenges for researchers, who must select appropriate methods and customize visualizations to meet specific research needs. This process demands advanced coding expertise, interdisciplinary collaboration, and significant time investment, which can hinder progress and impact the accuracy of experimental outcomes.\nTo address these challenges, we developed Bizard, a comprehensive, community-driven platform that integrates a curated repository of visualization codes, advanced tutorials, and collaborative forums. By streamlining access to resources and promoting knowledge exchange, Bizard aims to enhance biomedical researchers’ data analysis capabilities and facilitate the clinical translation of research findings.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Bizard",
    "section": "",
    "text": "Data visualization is a critical tool in biomedical research, enabling intuitive interpretation of complex datasets to advance scientific discovery and inform clinical decisions. The R programming language, with its powerful statistical capabilities and extensive package ecosystem, has become a cornerstone for creating high-quality visualizations. However, the vast and ever-evolving landscape of R plotting packages often poses challenges for researchers, who must select appropriate methods and customize visualizations to meet specific research needs. This process demands advanced coding expertise, interdisciplinary collaboration, and significant time investment, which can hinder progress and impact the accuracy of experimental outcomes.\nTo address these challenges, we developed Bizard, a comprehensive, community-driven platform that integrates a curated repository of visualization codes, advanced tutorials, and collaborative forums. By streamlining access to resources and promoting knowledge exchange, Bizard aims to enhance biomedical researchers’ data analysis capabilities and facilitate the clinical translation of research findings.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-is-bizard",
    "href": "index.html#what-is-bizard",
    "title": "Bizard",
    "section": "What is Bizard?",
    "text": "What is Bizard?\nBizard brings together powerful visualization tools, curated code, and collaborative features, enabling researchers to streamline data analysis and present their findings in a clear and impactful way.\n\nComprehensive Visualization Repository: Bizard consolidates visualization codes from diverse sources, including conventional graphgallery charts and innovative contributions from global experts, providing a state-of-the-art toolkit for biomedical research.\nVersatile Chart Options: The repository features R code implementations for a wide range of visualizations—variable distributions, correlation analyses, ranking plots, and interactive charts—meeting diverse data analysis needs.\nReal-World Applications: Leveraging both native R datasets and authentic biomedical data examples, Bizard enables intuitive understanding and application of visualization techniques in real-world research contexts, accelerating clinical translation.\nTailored for Biomedical Data: Includes preprocessing algorithms, annotated plotting codes, and specialized methodologies to accommodate the complexities of biomedical datasets, making advanced visualization accessible even to users with limited programming expertise.\nIntegrated Statistical Analysis: Combines statistical analysis functions with visualization modules, ensuring rigorous, visually compelling outputs that bolster research reliability and advance evidence-based medicine.\nCollaborative and Open Innovation: Actively invites contributions from biomedical experts to refine features and address evolving data visualization challenges through collective expertise.\nMulti-Platform Accessibility: Offers resources through an open-source GitHub repository with interactive forums and a WeChat official account for tutorials and updates, fostering knowledge sharing and collaboration.\nDriving Research Excellence: Empowers researchers to elevate their data visualization skills, improve methodological standards, and advance precision medicine and personalized therapies.\nFuture Vision: Committed to expanding international collaborations and delivering innovative, refined solutions to address the growing complexity of biomedical data visualization and analysis.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you find this useful or have suggestions for improvement, please let us know by leaving your comments in the GitHub Discussions💬 at the bottom of any page.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html",
    "href": "Distribution/ViolinPlot.html",
    "title": "Violin Plot",
    "section": "",
    "text": "A violin plot combines elements of a density plot and a box plot to visualize data distribution. It displays key statistical information, including the median, quartiles, minimum, and maximum values. Violin plots are particularly useful for comparing distributions across different groups, offering a more intuitive representation than traditional box plots by revealing the shape of the data distribution.",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#example",
    "href": "Distribution/ViolinPlot.html#example",
    "title": "Violin Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#setup",
    "href": "Distribution/ViolinPlot.html#setup",
    "title": "Violin Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: tidyr; ggplot2; dplyr; gghalves; forcats; hrbrthemes; viridis; ggstatsplot; palmerpenguins\n\n\n# Installing necessary packages\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"gghalves\", quietly = TRUE)) {\n  install.packages(\"gghalves\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"forcats\", quietly = TRUE)) {\n  install.packages(\"forcats\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"palmerpenguins\", quietly = TRUE)) {\n  install.packages(\"palmerpenguins\")\n}\n\n# Load packages\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gghalves)\nlibrary(forcats)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(ggstatsplot)\nlibrary(palmerpenguins)",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#data-preparation",
    "href": "Distribution/ViolinPlot.html#data-preparation",
    "title": "Violin Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (iris, penguins) and the TCGA-BRCA.htseq_counts.tsv dataset from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load the TCGA-BRCA gene expression dataset from a processed CSV file  \ndata_counts &lt;- read.csv(\"https://raw.githubusercontent.com/DrRobinLuo/Bizard/refs/heads/main/files/TCGA-BRCA.htseq_counts_processed.csv\")\n\n# Load built-in R dataset iris\ndata_wide &lt;- iris[ , 1:4] # Take the data in columns 1-4 of the iris database as an example\n\n# Load built-in R dataset penguins\ndata(\"penguins\", package = \"palmerpenguins\")\ndata_penguins &lt;- drop_na(penguins) # Remove missing values\n\n# Manually create a demonstration dataset with grouped values \ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n  )\nsample_size &lt;- data %&gt;% \n  group_by(name) %&gt;% \n  summarize(num=n()) # Compute the sample size for each group",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#visualization",
    "href": "Distribution/ViolinPlot.html#visualization",
    "title": "Violin Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Violin Plot\nExample 1: Basic Violin Plot with Manually Created Data\n\n# Basic Violin Plot\np &lt;- ggplot(data, aes(x=name, y=value, fill=name)) + \n  geom_violin()\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Violin Plot\n\n\n\n\n\nExample 2: Basic Violin Plot with the iris Dataset\n\n# Transform the `iris` dataset from wide format to long format. Use the gather function to collect the data in each column into two new columns named \"MesureType\" and \"Val\", so that one row represents one observation.\ndata_long_iris &lt;- data_wide %&gt;%  \n  gather(key = \"MeasureType\", value = \"Value\")  \n\nggplot(data_long_iris, aes(x = MeasureType, y = Value, fill = MeasureType)) +  \n  geom_violin()  \n\n\n\n\n\n\n\nFigure 2: Basic Violin Plot Using the iris Dataset\n\n\n\n\n\nExample 3: Violin Plot with TCGA-BRCA Gene Expression Data\n\nexample_counts1 &lt;- data_counts[1:5,] %&gt;%\n  gather(key = \"sample\",value = \"gene_expression\",3:1219) # Select five example genes for visualization: A1BG, A1BG-AS1, A1CF, A2M, and A2M-AS1.\n\nggplot(example_counts1, aes(x=gene_name, y=gene_expression, fill=gene_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nFigure 3: Basic Violin Plot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n2. Horizontal Violin Plot\nThe x and y axes can be flipped using coord_flip().\n\nexample_counts2 &lt;- data_counts[1:6,] %&gt;% \n  gather(key = \"sample\",value = \"gene_expression\",3:1219) %&gt;% \n  mutate(gene_name= fct_reorder(gene_name,gene_expression ))\n\nggplot(example_counts2, aes(x=gene_name, y=gene_expression, fill=gene_name, color=gene_name)) +\n  geom_violin() +\n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  theme_ipsum() + # Improve plot appearance\n  theme(legend.position=\"none\" ) +\n  coord_flip() + # flip the x and y axes\n  xlab(\"\") +\n  ylab(\"Assigned Probability (%)\")\n\n\n\n\n\n\n\nFigure 4: Horizontal Violin Plot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n3. Violin Plot with Boxplot\nIn practical visualization applications, a box plot can be added to a violin plot using geom_boxplot(), which helps in visually comparing the distribution of the data.\n\nexample_data &lt;- data %&gt;% \n  left_join(sample_size) %&gt;%\n  mutate(myaxis = paste0(name, \"\\n\", \"n=\", num)) # The `myaxis` variable is created to display sample size on the x-axis.  \n\nggplot(example_data, aes(x=myaxis, y=value, fill=name)) +\n  geom_violin(width=1.4) +\ngeom_boxplot( width=0.1,color=\"grey\", alpha=0.2) + # Draw a box plot. A small width value makes the box plot inside the violin plot.\nscale_fill_viridis(discrete = TRUE) +\n  theme_ipsum() + # Beautify the graph\n  theme(\n   legend.position=\"none\",\n   plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"A Violin plot wrapping a boxplot\") +  # Set the title\n  xlab(\"\")\n\n\n\n\n\n\n\nFigure 5: Violin Plot with Boxplot\n\n\n\n\n\nAnother Violin Plot with Box Plot using the TCGA-BRCA Gene Expression Data\n\nexample_counts3 &lt;- data_counts[1:5,] %&gt;%\n  gather(key = \"sample\", value = \"gene_expression\",3:1219) %&gt;%\n  mutate(gene_name= fct_reorder(gene_name,gene_expression ))\n\nggplot(example_counts3, aes(x=gene_name, y=gene_expression, fill=gene_name, color=gene_name)) +\n  geom_violin() +\n  geom_boxplot( width=0.1,color=\"grey\", alpha=0.2)+\n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  theme_ipsum() + # Beautify the graph\n  theme(legend.position=\"none\" ) \n\n\n\n\n\n\n\nFigure 6: Violin Plot with Boxplot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n4. Grouped Violin Plot\nOn the basis of the basic violin plot, we can achieve intra-group comparison by setting the fill value.\nThe example below demonstrates intra-group comparison using the fill aesthetic. In this case, the penguins dataset is used. The x variable represents the species, and fill=sex creates an intra-group classification to visualize the comparison of flipper lengths within each species, grouped by gender.\n\nggplot(data_penguins, aes(fill=sex, y=flipper_length_mm, x=species)) + # Use X as the major classification and fill as the intra-group classification\n  geom_violin(position=\"dodge\", alpha=0.5, outlier.colour=\"transparent\") +\n  scale_fill_viridis(discrete=T, name=\"\") +\n  theme_ipsum()  \n\n\n\n\n\n\n\nFigure 7: Grouped Violin Plot Using the penguins dataset\n\n\n\n\n\n\n\n5. Half-Violin Plot\nA half-violin plot is useful for visualizing a large amount of data in a compact form. We can use the geom_half_violin function to display two groups separately.\nIn the following example, we visualize the flipper lengths of penguins for both species and genders, by plotting female and male penguins on opposite sides of the plot.\n\n# Separate the data for female and male penguins\ndata_female &lt;- data_penguins %&gt;% filter(sex == \"female\")\ndata_male &lt;- data_penguins %&gt;% filter(sex == \"male\")\n\n# Plot the half-violin plot for both groups (females on the right and males on the left)\nggplot() +\n  geom_half_violin(\n    data = data_female,\n    aes(y = flipper_length_mm, x = species),\n    position = position_dodge(width = 1),\n    scale = 'width',\n    colour = NA,\n    fill = \"#9370DB\",\n    alpha = 0.8,  ## Set transparency\n    side = \"r\"\n  ) +\n  geom_half_violin(\n    data = data_male,\n    aes(y = flipper_length_mm, x = species),\n    position = position_dodge(width = 1),\n    scale = 'width',\n    colour = NA,\n    fill = \"#FFFF00\",\n    alpha = 0.6,\n    side = \"l\"\n  )\n\n\n\n\n\n\n\nFigure 8: Half-Violin Plot Using the penguins dataset\n\n\n\n\n\n\n\n6. Violin Plot Using the ggstatsplot Package\nThe ggstatsplot package extends ggplot2 by adding powerful statistical visualizations. The ggbetweenstats() function allows the creation of combined violin plots, box plots, and scatter plots.\nIn the following example, we visualize the distribution of bill lengths across different penguin species using the penguins dataset. We further enhance the plot’s aesthetics using the theme() function.\n\nplt &lt;- ggbetweenstats(\n  data = data_penguins,\n  x = species,\n  y = bill_length_mm\n) +\n# Beautification\n  labs(  ## Add labels and title\n    x = \"Penguins Species\",\n    y = \"Bill Length\",\n    title = \"Distribution of bill length across penguins species\"\n  ) +\n  theme(\n    axis.ticks = element_blank(),\n    axis.line = element_line(colour = \"grey50\"),\n    panel.grid = element_line(color = \"#b4aea9\"),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(linetype = \"dashed\"),\n    panel.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\"),\n    plot.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\")\n  )\n\nplt\n\n\n\n\n\n\n\nFigure 9: Violin Plot Using the ggstatsplot Package",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#application",
    "href": "Distribution/ViolinPlot.html#application",
    "title": "Violin Plot",
    "section": "Application",
    "text": "Application\n\n1. Basic Violin Plot\n\n\n\n\n\n\nFigure 10: Applications of Basic Violin Plot\n\n\n\nFigure 10 e is a violin plot of the relative abundances of circRNAs in seven types of cancer tissues and their corresponding normal tissues [1].\n\n\n2. Grouped Violin Plot\n\n\n\n\n\n\nFigure 11: Applications of Grouped Violin Plot\n\n\n\nThe above violin plot analyzes and compares the levels and distributions of 31 proteins and mRNAs in single A549 cells [2].\n\n\n3. Half-Violin Plot\n\n\n\n\n\n\nFigure 12: Applications of Half-Violin Plot\n\n\n\nFigure 12 E uses a half-violin plot to analyze the clone size distribution of WT clones in WT intestines (left) or M−/+ intestines (middle and right figures) [3].\n\n\n4. Violin Plot with Boxplot\n\n\n\n\n\n\nFigure 13: Applications of Violin Plot with Boxplot\n\n\n\nFigure 13 D shows the expected median MSD and distribution of droplets attached to the substrate (noise) and in water (stimulation), as well as the nanoscale RMS displacement [4].",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#reference",
    "href": "Distribution/ViolinPlot.html#reference",
    "title": "Violin Plot",
    "section": "Reference",
    "text": "Reference\n[1] Zheng Q, Bao C, Guo W, Li S, Chen J, Chen B, Luo Y, Lyu D, Li Y, Shi G, Liang L, Gu J, He X, Huang S. Circular RNA profiling reveals an abundant circHIPK3 that regulates cell growth by sponging multiple miRNAs. Nat Commun. 2016 Apr 6;7:11215. doi: 10.1038/ncomms11215. PMID: 27050392; PMCID: PMC4823868.\n[2] Gong H, Wang X, Liu B, Boutet S, Holcomb I, Dakshinamoorthy G, Ooi A, Sanada C, Sun G, Ramakrishnan R. Single-cell protein-mRNA correlation analysis enabled by multiplexed dual-analyte co-detection. Sci Rep. 2017 Jun 5;7(1):2776. doi: 10.1038/s41598-017-03057-5. PMID: 28584233; PMCID: PMC5459813.\n[3] Kolahgar G, Suijkerbuijk SJ, Kucinski I, Poirier EZ, Mansour S, Simons BD, Piddini E. Cell Competition Modifies Adult Stem Cell and Tissue Population Dynamics in a JAK-STAT-Dependent Manner. Dev Cell. 2015 Aug 10;34(3):297-309. doi: 10.1016/j.devcel.2015.06.010. Epub 2015 Jul 23. PMID: 26212135; PMCID: PMC4537514.\n[4] Cribb JA, Osborne LD, Beicker K, Psioda M, Chen J, O’Brien ET, Taylor Ii RM, Vicci L, Hsiao JP, Shao C, Falvo M, Ibrahim JG, Wood KC, Blobe GC, Superfine R. An Automated High-throughput Array Microscope for Cancer Cell Mechanics. Sci Rep. 2016 Jun 6;6:27371. doi: 10.1038/srep27371. PMID: 27265611; PMCID: PMC4893602.\n[5] Wickham H, Vaughan D, Girlich M (2024). tidyr: Tidy Messy Data. R package version 1.3.1, https://CRAN.R-project.org/package=tidyr.\n[6] H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\n[7] Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.4, https://CRAN.R-project.org/package=dplyr.\n[8] Tiedemann F (2022). gghalves: Compose Half-Half Plots Using Your Favourite Geoms. R package version 0.1.4, https://CRAN.R-project.org/package=gghalves.\n[9] Wickham H (2023). forcats: Tools for Working with Categorical Variables (Factors). R package version 1.0.0, https://CRAN.R-project.org/package=forcats.\n[10] Rudis B (2024). hrbrthemes: Additional Themes, Theme Components and Utilities for ‘ggplot2’. R package version 0.8.7, https://CRAN.R-project.org/package=hrbrthemes.\n[11] Simon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2024). viridis(Lite) - Colorblind-Friendly Color Maps for R. viridis package version 0.6.5.\n[12] Patil, I. (2021). Visualizations with statistical details: The ‘ggstatsplot’ approach. Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n[13] Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html",
    "href": "Distribution/Histogram.html",
    "title": "Histogram",
    "section": "",
    "text": "A histogram uses rectangular bars to represent the frequency of data within specific intervals, where the total area of the bars corresponds to the total frequency. It is primarily used to visualize the distribution of continuous variables.",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#example",
    "href": "Distribution/Histogram.html#example",
    "title": "Histogram",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis basic histogram illustrates the expression levels of the TSPAN6 gene across different samples. The x-axis represents the data values, with each bar covering a specific range of values, while the y-axis shows how many data points fall within that range. In this histogram, the bars indicate the count of values within each specified range.\nThe histogram reveals that the data is centered around a value of 12, with values spanning roughly from 8 to 16. The shape of the histogram is approximately bell-shaped, suggesting that the data may follow a normal distribution.",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#setup",
    "href": "Distribution/Histogram.html#setup",
    "title": "Histogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, ggplot2, ggExtra, tidyverse, cowplot, viridis, ggpmisc, ggpubr\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Loading the libraries\nlibrary(readr)      # Read tsv files\nlibrary(ggplot2)    # Load ggplot2 for creating plots\nlibrary(ggExtra)    # Load ggExtra for enhancing ggplot2 graphics\nlibrary(tidyverse)  # Load tidyverse for data manipulation functions\nlibrary(cowplot)  # Load cowplot for combining separate ggplots into the same graphic\nlibrary(viridis)    # Load viridis for color maps\nlibrary(ggpmisc)    # Load ggpmisc for extentions to ggplot2 with additional functions for statistical annotation\nlibrary(ggpubr)     # Load ggpubr for extentions to ggplot2 with adding publication-ready themes, arranging multiple plots, and statistical tests",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#data-preparation",
    "href": "Distribution/Histogram.html#data-preparation",
    "title": "Histogram",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (iris, mtcars) and the TCGA-LIHC.htseq_counts.tsv dataset from UCSC Xena DATASETS.\n\n# Read the TSV data\ndata &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz\")\n\n# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var1\")  # Add a column to differentiate the variables\n\n# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var2\")  # Add a column to differentiate the variables\n\n# Combine the two datasets\ndata12 &lt;- bind_rows(data1, data2)\n\n# View the final combined dataset\nhead(data12)\n\n# A tibble: 6 × 4\n  Ensembl_ID         sample           expression var  \n  &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;\n1 ENSG00000000003.13 TCGA-DD-A4NG-01A      12.8  var1 \n2 ENSG00000000003.13 TCGA-G3-AAV4-01A       9.72 var1 \n3 ENSG00000000003.13 TCGA-2Y-A9H1-01A      11.3  var1 \n4 ENSG00000000003.13 TCGA-CC-A3M9-01A      11.6  var1 \n5 ENSG00000000003.13 TCGA-K7-AAU7-01A      11.5  var1 \n6 ENSG00000000003.13 TCGA-BC-A10W-01A      12.0  var1",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#visualization",
    "href": "Distribution/Histogram.html#visualization",
    "title": "Histogram",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Histograms\nFigure 1 illustrates the distribution of expression levels for the TSPAN6 gene across different samples.\n\n# Basic Histogram\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram() + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np1\n\n\n\n\n\n\n\nFigure 1: Basic Histogram\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: binwidth / bins\nThe binwidth or bins parameter determines how much data each bin will contain. Modifying these values can significantly affect the appearance of the histogram and the information conveyed.\n\n\n\np2_1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 30\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np2_2 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 50, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 50\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\ncowplot::plot_grid(p2_1, p2_2)\n\n\n\n\n\n\n\nFigure 2: Key Parameters: binwidth / bins\n\n\n\n\n\n\n\n2. Histogram with Density Curve\nThe density curve provides a smooth representation of the data distribution. Unlike the histogram, which depends on the number of bins, the density curve uses kernel density estimation (KDE) to smooth the distribution. This allows a clearer understanding of the overall trend and shape of the data.\n\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_density(alpha = 0.2, fill = \"#FF6666\") + \n  labs(x = \"Gene Expression\", y = \"Density\")\n\np1\n\n\n\n\n\n\n\nFigure 3: Histogram with Density Curve\n\n\n\n\n\n\n\n3. Mirrored Histogram\nA mirrored histogram provides an intuitive way to compare the distributions of two datasets. This visualization uses a mirrored structure, allowing you to quickly assess symmetry or differences between the datasets. By overlaying both histograms into a single plot, the mirrored histogram conserves visualization space while maintaining a clear representation of data distribution.\n\np &lt;- ggplot(data12, aes(x = expression, fill = var)) +\n  geom_histogram(data = subset(data12, var == \"var1\"), \n                 aes(y = after_stat(density)), \n                 binwidth = 0.5, \n                 alpha = 0.7, \n                 fill = \"#69b3a2\") +\n  geom_histogram(data = subset(data12, var == \"var2\"), \n                 aes(y = -after_stat(density)), \n                 binwidth = 0.5, \n                 alpha = 0.7, \n                 fill = \"#404080\") +\n  scale_fill_manual(values = c(\"var1\" = \"#69b3a2\", \"var2\" = \"#404080\")) +\n  labs(x = \"Gene Expression\", y = \"Density\")\n\np\n\n\n\n\n\n\n\nFigure 4: Mirrored Histogram\n\n\n\n\n\n\n\n4. Overlapping Histograms on the Same Axis\nOverlaying or placing multiple histograms side by side on the same axis enables a direct comparison of distributions for two or more datasets within the same coordinate system. By adjusting colors and transparency, you can clearly visualize overlapping regions and distinguish between datasets. This technique is ideal for comparing 2–3 groups; more groups may lead to visual clutter, making the plot difficult to interpret.\n\np &lt;- data12 %&gt;%\n  ggplot(aes(x = expression, fill = var)) +\n  geom_histogram(color = \"#e9ecef\", alpha = 0.6, position = 'identity') +\n  scale_fill_manual(values = c(\"#69b3a2\", \"#404080\")) +\n  labs(x = \"Expression Value\", y = \"Count\", fill = \"Type\") +\n  theme_minimal()\n\np\n\n\n\n\n\n\n\nFigure 5: Overlapping Histograms on the Same Axis\n\n\n\n\n\n\n\n5. Faceted Histograms for Multiple Variables\nFaceted histograms provide a structured way to compare and analyze data across multiple variables or categorical groups by displaying them in separate panels. Unlike traditional histograms, faceted layouts are particularly effective for avoiding overlap in visualizations, ensuring clarity in comparisons, and enabling multidimensional data exploration. This approach is ideal for grouped or classified data and enhances the interpretability of complex datasets.\n\n# Use built-in iris dataset\ndata &lt;- iris\n\n# Reshape the data from wide to long format\ndata &lt;- data %&gt;%\n  gather(key = \"variable\", value = \"value\", -Species)  # Exclude the Species column\n\n# Plot the faceted histograms\np &lt;- data %&gt;%\n  ggplot(aes(x = value, color = Species, fill = Species)) +\n  geom_histogram(alpha = 0.6, binwidth = 0.3, position = \"identity\") +\n  scale_fill_viridis(discrete = TRUE, option = \"D\") +\n  scale_color_viridis(discrete = TRUE, option = \"D\") +\n  theme(\n    legend.position = \"bottom\",\n    panel.spacing = unit(0.5, \"lines\"),\n    strip.text.x = element_text(size = 10)\n  ) +\n  xlab(\"Value\") +\n  ylab(\"Frequency\") +\n  facet_grid(Species ~ variable, scales = \"free_x\")  # Create a facet grid\n\np\n\n\n\n\n\n\n\nFigure 6: Faceted Histograms for Multiple Variables\n\n\n\n\n\n\n\n6. Adding Marginal Distributions Using ggMarginal()\n\n# Create a scatterplot with marginal histograms\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Custom colors for regression lines\n  stat_regline_equation(\n    aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = \"~~~~\")),\n    formula = y ~ x, size = 3,\n    position = position_nudge(x = 2.7, y = 1)\n  ) +  # Add regression equations and R² values\n  theme(legend.position = \"none\")  # Hide legend for cleaner visualization\n\n# Add marginal histograms to the scatterplot\np1 &lt;- ggMarginal(p, type = \"histogram\")\n\n# Display the plot\np1\n\n\n\n\n\n\n\nFigure 7: Adding Marginal Distributions Using ggMarginal()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nCustomizable Parameters for Plots with Marginal Distributions\n\nChange the size of the marginal plot using the size parameter.\nCustomize the appearance of the marginal plot with common parameters.\nDisplay only one marginal plot (either the x or y axis) using margins = 'x' or margins = 'y'.\n\n\n\n\n# Create a scatterplot with marginal histograms\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Custom colors for regression lines\n  stat_regline_equation(\n    aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = \"~~~~\")),\n    formula = y ~ x, size = 1.5,\n    position = position_nudge(x = 2.2, y = 1)\n  ) +  # Add regression equations and R² values\n  theme(legend.position = \"none\")  # Hide legend for cleaner visualization\n\n# Change the size of the marginal plot\np1 &lt;- ggMarginal(p, type = \"histogram\", size = 10)\n\n# Customize the appearance of the marginal plot\np2 &lt;- ggMarginal(p, type = \"histogram\", fill = \"slateblue\", xparams = list(bins = 10))\n\n# Display only one marginal plot (x-axis marginal plot)\np3 &lt;- ggMarginal(p, type = \"histogram\", margins = 'x')\n\ncowplot::plot_grid(p1, p2, p3)\n\n\n\n\n\n\n\nFigure 8: Customizable Parameters for Plots with Marginal Distributions",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#applications",
    "href": "Distribution/Histogram.html#applications",
    "title": "Histogram",
    "section": "Applications",
    "text": "Applications\n\n1. Applications of Basic Histogram\n\n\n\n\n\n\nFigure 9: Applications of Basic Histogram\n\n\n\nFigure 9 shows the differences between the relative frequencies of human X and human Y chromosome’s histograms for n = 6. [1]\n\n\n2. Applications of Faceted Histograms\n\n\n\n\n\n\n\n\n\n\n\n(a) Xiang, L. et al.(2023)\n\n\n\n\n\n\n\n\n\n\n\n(b) Gihr, G.A. et al.(2020)\n\n\n\n\n\n\n\nFigure 10: Applications of Faceted Histograms\n\n\n\nFig. 10a shows the imaging features and whole-lesion histogram analysis of typical SPLs. [2]\nFig. 10b demonstrates examples of cranial MRI from patients with WHO grade I (upper row) and WHO grade II astrocytoma (lower row) including the corresponding whole tumor ADC histogram, H&E staining and Ki-67 immunohistochemistry. [3]",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#reference",
    "href": "Distribution/Histogram.html#reference",
    "title": "Histogram",
    "section": "Reference",
    "text": "Reference\n\nCosta, A. M., Machado, J. T., & Quelhas, M. D. (2011). Histogram-based DNA analysis for the visualization of chromosome, genome, and species information. Bioinformatics, 27(9), 1207–1214. https://doi.org/10.1093/bioinformatics/btr131\nXiang, L., Yang, H., Qin, Y., Wen, Y., Liu, X., & Zeng, W.-B. (2023). Differential value of diffusion kurtosis imaging and intravoxel incoherent motion in benign and malignant solitary pulmonary lesions. Frontiers in Oncology, 12, Article 1075072. https://doi.org/10.3389/fonc.2022.1075072\nGihr, G. A., Horvath-Rizea, D., Hekeler, E., Ganslandt, O., Henkes, H., Hoffmann, K.-T., Scherlach, C., & Schob, S. (2020). Histogram analysis of diffusion weighted imaging in low-grade gliomas: in vivo characterization of tumor architecture and corresponding neuropathology. Frontiers in Oncology, 10, 206. https://doi.org/10.3389/fonc.2020.00206\nWickham, H., Hester J, & Bryan J. (2024). readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer. https://ggplot2.tidyverse.org\nGao, Y. (2021). ggExtra: Add marginal plots to ggplot2. https://cran.r-project.org/package=ggExtra\nWickham, H., & RStudio Team. (2019). tidyverse: Easily install and load the ‘tidyverse’. https://cran.r-project.org/package=tidyverse\nClaus O. Wilke. (2024). cowplot: Streamlined Plot Theme and Plot Annotations for ‘ggplot2’. https://CRAN.R-project.org/package=cowplot\nGarcía, M. (2018). viridis: Default color maps from ‘matplotlib’. https://cran.r-project.org/package=viridis\nAubry, R., & Bouchard, C. (2020). ggpmisc: Miscellaneous extensions to ‘ggplot2’. https://cran.r-project.org/package=ggpmisc\nKassambara, A. (2021). ggpubr: ‘ggplot2’ based publication-ready plots. https://cran.r-project.org/package=ggpubr",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html",
    "href": "Distribution/Ridgeline.html",
    "title": "Ridgeline Plot",
    "section": "",
    "text": "A ridgeline plot, also known as a joyplot, visualizes the distribution of multiple numeric variables across different categories. This method is useful for comparing density distributions while preserving an overall view of trends and variations.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#example",
    "href": "Distribution/Ridgeline.html#example",
    "title": "Ridgeline Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nA Ridgeline plot represents the distribution of a numeric variable across several groups. In this example, the plot displays the distribution of diamond prices across different quality categories. The x-axis represents price values, while the density curves illustrate how frequently each price occurs within each quality group.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#setup",
    "href": "Distribution/Ridgeline.html#setup",
    "title": "Ridgeline Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, ggplot2, ggridges, viridis, hrbrthemes\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggridges\", quietly = TRUE)) {\n  install.packages(\"ggridges\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\n\n# Loading the libraries\nlibrary(readr)      # For reading TSV files\nlibrary(dplyr)      # For data manipulation\nlibrary(ggplot2)    # For creating plots\nlibrary(ggridges)   # For density ridgeline plots\nlibrary(hrbrthemes) # For enhanced ggplot2 themes\nlibrary(viridis)    # For color maps",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#data-preparation",
    "href": "Distribution/Ridgeline.html#data-preparation",
    "title": "Ridgeline Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nHere’s a brief tutorial using the built-in R datasets (iris) and the Lung Cancer (Raponi 2006) dataset from UCSC Xena DATASETS.\n\n# Load iris dataset\ndata(\"iris\")\n\n# Load Lung Cancer (Raponi 2006) clinical data\nTCGA_clinic &lt;- read_tsv(\"https://ucsc-public-main-xena-hub.s3.us-east-1.amazonaws.com/download/raponi2006_public%2Fraponi2006_public_clinicalMatrix.gz\") %&gt;%\n  mutate(T = as.factor(T))\nhead(TCGA_clinic)\n\n# A tibble: 6 × 16\n  sampleID   Age Differentiation Gender Histology     M     N Race \n  &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n1 LS-1        75 mod_poor        M      SCC           0     0 w    \n2 LS-10       61 poor            F      SCC           0     0 w    \n3 LS-100      72 mod             M      SCC           0     0 w    \n4 LS-101      75 mod             M      SCC           0     1 w    \n5 LS-102      76 mod             F      SCC           0     0 w    \n6 LS-103      58 well_mod        M      SCC           0     1 w    \n# ℹ 8 more variables: Smoking_History_Packyears &lt;dbl&gt;, Stage &lt;chr&gt;,\n#   OS.time &lt;dbl&gt;, T &lt;fct&gt;, OS &lt;chr&gt;, `_INTEGRATION` &lt;chr&gt;, `_PATIENT` &lt;chr&gt;,\n#   `_GENOMIC_ID_raponi2006` &lt;chr&gt;",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#visualization",
    "href": "Distribution/Ridgeline.html#visualization",
    "title": "Ridgeline Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Ridgeline Plot\nFigure 1 illustrates the distribution of the Sepal.Length variable across different Species.\n\n# Basic Ridgeline plot\np1_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = Species)) +\n  geom_density_ridges(alpha = 0.5) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"right\")\n\np1_1\n\n\n\n\n\n\n\nFigure 1: Basic Ridgeline Plot Using the iris Dataset\n\n\n\n\n\nFigure 2 illustrates the distribution of the OS.time variable across primary tumor conditions and survival status.\n\n# Basic Ridgeline plot\np1_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = T)) +\n  geom_density_ridges(alpha = 0.5, scale = 2) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"right\")\n\np1_2\n\n\n\n\n\n\n\nFigure 2: Basic Ridgeline Plot Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey function notes: geom_density_ridges() / theme_ridges()\ngeom_density_ridges()\ngeom_density_ridges is a very flexible function that can be used to create multiple styles of ridgeline plots.\nHere are some commonly used parameters and options for geom_density_ridges():\n\nalpha: Sets the transparency.\ncolour: Sets the line color.\nfill: Fills colors based on categorical variables.\nscale: Controls the overlap between ridges.\n\ntheme_ridges()\ntheme_ridges is a theme function provided by the ggridges package specifically for beautifying ridge plots.\nThe parameters of this function include:\n\n**font_size**: Overall font size, default is 14.\nline_size: Default line size.\ngrid: If set to TRUE (default), it will draw a background grid; if set to FALSE, the background will be blank.\n\n\n\n\n\n2. Histogram Ridgeline Plots\nHistogram ridgeline plots are ideal for displaying data distributions and counts, whereas traditional ridgeline plots are better suited for comparing distribution shapes across categories. Density can be represented in various ways; for instance, setting stat = “binline” creates a histogram-like appearance for each distribution.\nFigure 3 illustrates the Sepal The distribution of the Length variable on different specifications.\n\np2_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = Species)) +\n  geom_density_ridges(alpha = 0.5, stat = \"binline\", bins = 10) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"none\")\n\np2_1\n\n\n\n\n\n\n\nFigure 3: Histogram Ridgeline Plots Using the iris Dataset\n\n\n\n\n\nFigure 4 illustrates the distribution of the OS.time variable in primary tumor conditions and survival status\n\np2_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = T)) +\n  geom_density_ridges(alpha = 0.5, stat = \"binline\", bins = 10) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"none\")\n\np2_2\n\n\n\n\n\n\n\nFigure 4: Histogram Ridgeline Plots Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n3. Ridgeline Plot with Variable Colors\nColors can be assigned based on numerical variables instead of categorical ones, allowing for a more intuitive visualization of changes in data size.\nFigure 5 illustrates the Sepal The distribution of the Length variable on different specifications.\n\np3_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = ..x..)) +  # Create ridge plot\n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +  # Adjust parameters\n  scale_fill_viridis(name = \"Sepal.Length\", option = \"C\") +  # Adjust color mapping\n  labs(title = 'Sepal.Length in iris') + \n  theme_ipsum() +   # Set image theme\n  theme(legend.position = \"bottom\",  \n        panel.spacing = unit(0.1, \"lines\"),\n        strip.text.x = element_text(size = 8))\n\np3_1\n\n\n\n\n\n\n\nFigure 5: Ridgeline Plot with Variable Colors Using the iris Dataset\n\n\n\n\n\nFigure 6 illustrates the distribution of the OS.time variable in primary tumor conditions and survival status.\n\np3_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = ..x..)) +  # Create ridge plot\n  geom_density_ridges_gradient(scale = 1, rel_min_height = 0.01) +  # Adjust parameters\n  scale_fill_viridis(name = \"OS.time\", option = \"C\") +  # Adjust color mapping\n  labs(title = 'Distribution of OS.time in different tumor staging') + \n  theme_ipsum() +   # Set image theme\n  theme(legend.position = \"bottom\", panel.spacing = unit(0.1, \"lines\"),\n        strip.text.x = element_text(size = 8))\n\np3_2\n\n\n\n\n\n\n\nFigure 6: Ridgeline Plot with Variable Colors Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey function notes: scale_fill_viridis() / theme_ipsum()\nscale_fill_viridis()\nThis function from the viridis package provides color mapping schemes for continuous data.\nCommonly used parameters include:\n\nbegin and end: Control the start and end positions of the color mapping (values between 0 and 1).\ndirection: Controls the color direction.\n\nA value of 1 gradually darkens the color from low to high values.\nA value of -1 reverses this direction.\n\noption: Selects a predefined color scheme from the viridis package (e.g., “magma”, “inferno”, or “plasma”).\naesthetics: Specifies whether the color is applied to the fill (fill) or the outline (colour).\n\ntheme_ipsum()\nThis function from the hrbrthemes package provides a predefined theme for ggplot2.\nHere are some themes available in the hrbrthemes package:\n\ntheme_ipsum(): The core theme, featuring Arial Narrow font and emphasizing good typography and readability.\ntheme_ft_rc(): A clean and precise theme with a focus on typography.\ntheme_ipsum_rc(): A variant of theme_ipsum(), with possible different typography or color choices.\ntheme_ipsum_tw(): A theme designed for Twitter branding, using Twitter’s colors and font styles.\ntheme_ipsum_ps(): Optimized for print design with specific typography and color choices.\ntheme_modern_rc(): A modern, minimalist theme suited for contemporary data visualization needs.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#applications",
    "href": "Distribution/Ridgeline.html#applications",
    "title": "Ridgeline Plot",
    "section": "Applications",
    "text": "Applications\n\n1. Ridgeline Plot for Group Comparison\n\n\n\n\n\n\nFigure 7: Applications of Ridgeline Plot for Group Comparison\n\n\n\nRidgeline plots are used to visualize cytokine expression across various experimental conditions and to compare gene expression distributions in different cell populations. [1]\n\n\n2. Using Ridgeline Plots to Visualize Gene Set Enrichment Analysis Results\n\n\n\n\n\n\nFigure 8: Applications of Using Ridgeline Plots to Visualize Gene Set Enrichment Analysis Results\n\n\n\nRidgeline plots are used to visualize gene set enrichment analysis results, highlighting biomarkers associated with Moyamoya disease. [2]",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#reference",
    "href": "Distribution/Ridgeline.html#reference",
    "title": "Ridgeline Plot",
    "section": "Reference",
    "text": "Reference\n\nKrämer B, Nalin AP, Ma F, Eickhoff S, Lutz P, Leonardelli S, Goeser F, Finnemann C, Hack G, Raabe J, ToVinh M, Ahmad S, Hoffmeister C, Kaiser KM, Manekeller S, Branchi V, Bald T, Hölzel M, Hüneburg R, Nischalke HD, Semaan A, Langhans B, Kaczmarek DJ, Benner B, Lordo MR, Kowalski J, Gerhardt A, Timm J, Toma M, Mohr R, Türler A, Charpentier A, van Bremen T, Feldmann G, Sattler A, Kotsch K, Abdallah AT, Strassburg CP, Spengler U, Carson WE 3rd, Mundy-Bosse BL, Pellegrini M, O’Sullivan TE, Freud AG, Nattermann J. Single-cell RNA sequencing identifies a population of human liver-type ILC1s. Cell Rep. 2023 Jan 31;42(1):111937. doi: 10.1016/j.celrep.2022.111937. Epub 2023 Jan 1. PMID: 36640314; PMCID: PMC9950534.\nXu Y, Chen B, Guo Z, Chen C, Wang C, Zhou H, Zhang C, Feng Y. Identification of diagnostic markers for moyamoya disease by combining bulk RNA-sequencing analysis and machine learning. Sci Rep. 2024 Mar 11;14(1):5931. doi: 10.1038/s41598-024-56367-w. PMID: 38467737; PMCID: PMC10928210.\nWickham, H. (2009). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. ISBN 978-0-387-98140-6 (Print) 978-0-387-98141-3 (E-Book). [DOI: 10.1007/978-0-387-98141-3] (https://doi.org/10.1007/978-0-387-98141-3)\nScherer, C. (2019). ggridges: Ridgeline plots in ‘ggplot2’. Journal of Statistical Software, 88(1), 1-19. [DOI: 10.18637/jss.v088.i01] (https://doi.org/10.18637/jss.v088.i01)\nGarnier, S., Team, R. C., & Team, R. S. (2018). viridis: Default color maps for R. R package version 0.5.1. https://CRAN.R-project.org/package=viridis\nFournet, H. (2016). hrbrthemes: Additional themes, scales, and geoms for ‘ggplot2’. R package version 1.7.6. https://CRAN.R-project.org/package=hrbrthemes",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  }
]