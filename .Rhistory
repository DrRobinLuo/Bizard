patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
options(repr.plot.width = 5, repr.plot.height = 2)
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| fig.width: 14
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| fig.dim: c(6, 4)
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| fig.dim: c(8, 4)
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| fig.dim: c(2, 4)
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
p1
#patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2)
#patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
plot_grid(p1, p2)
library(cowplot)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
plot_grid(p1, p2)
#patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
gc()
# Installing necessary packages
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("ggExtra", quietly = TRUE)) {
install.packages("ggExtra")
}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if (!requireNamespace("patchwork", quietly = TRUE)) {
install.packages("patchwork")
}
if (!requireNamespace("cowplot", quietly = TRUE)) {
install.packages("cowplot")
}
if (!requireNamespace("viridis", quietly = TRUE)) {
install.packages("viridis")
}
if (!requireNamespace("ggpmisc", quietly = TRUE)) {
install.packages("ggpmisc")
}
if (!requireNamespace("ggpubr", quietly = TRUE)) {
install.packages("ggpubr")
}
# Loading the libraries
library(ggplot2)    # Load ggplot2 for creating plots
library(ggExtra)    # Load ggExtra for enhancing ggplot2 graphics
library(tidyverse)  # Load tidyverse for data manipulation functions
library(patchwork)  # Load patchwork for combining separate ggplots into the same graphic
library(cowplot)  # Load cowplot for combining separate ggplots into the same graphic
library(viridis)    # Load viridis for color maps
library(ggpmisc)    # Load ggpmisc for extentions to ggplot2 with additional functions for statistical annotation
library(ggpubr)     # Load ggpubr for extentions to ggplot2 with adding publication-ready themes, arranging multiple plots, and statistical tests
data <- readr::read_tsv("https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz", header = TRUE)
data <- readr::read_tsv("https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz")
# Read the TSV data
data2 <- read.csv("files/TCGA-LIHC.star_counts.tsv", header = TRUE, sep = "\t")  # Correct separator for TSV
View(data2)
View(data)
rm(data2)
# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.15)
data1 <- data %>%
filter(Ensembl_ID == "ENSG00000000003.15") %>%
pivot_longer(
cols = -Ensembl_ID,
names_to = "sample",
values_to = "expression"
) %>%
mutate(var = "var1")  # Add a column to differentiate the variables
# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)
data2 <- data %>%
filter(Ensembl_ID == "ENSG00000000457.14") %>%
pivot_longer(
cols = -Ensembl_ID,
names_to = "sample",
values_to = "expression"
) %>%
mutate(var = "var2")  # Add a column to differentiate the variables
# Combine the two datasets
data12 <- bind_rows(data1, data2)
# View the final combined dataset
head(data12)
# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)
data1 <- data %>%
filter(Ensembl_ID == "ENSG00000000003.13") %>%
pivot_longer(
cols = -Ensembl_ID,
names_to = "sample",
values_to = "expression"
) %>%
mutate(var = "var1")  # Add a column to differentiate the variables
# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)
data2 <- data %>%
filter(Ensembl_ID == "ENSG00000000457.12") %>%
pivot_longer(
cols = -Ensembl_ID,
names_to = "sample",
values_to = "expression"
) %>%
mutate(var = "var2")  # Add a column to differentiate the variables
# Combine the two datasets
data12 <- bind_rows(data1, data2)
# View the final combined dataset
head(data12)
#| label: fig-BasicHist
#| fig-cap: "Basic Histogram"
#| out.width: "95%"
#| warning: false
# Basic Histogram
p1 <- ggplot(data1, aes(x = expression)) +
geom_histogram() +
labs(x = "Gene Expression", y = "Count")
p1
#| label: fig-bins
#| fig-cap: "Key Parameters: `binwidth` / `bins`"
#| fig.width: 8
#| fig.heright: 2
#| out.width: "95%"
#| warning: false
p2_1 <- ggplot(data1, aes(x = expression)) +
geom_histogram(bins = 30, fill = "skyblue", color = "white") +
ggtitle("Bins = 30") +
labs(x = "Gene Expression", y = "Count")
p2_2 <- ggplot(data1, aes(x = expression)) +
geom_histogram(bins = 50, fill = "skyblue", color = "white") +
ggtitle("Bins = 50") +
labs(x = "Gene Expression", y = "Count")
p2_1 + p2_2
#| label: fig-DensityCurve
#| fig-cap: "Histogram with Density Curve"
#| out.width: "95%"
#| warning: false
p1 <- ggplot(data1, aes(x = expression)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "skyblue", color = "white") +
geom_density(alpha = 0.2, fill = "#FF6666") +
labs(x = "Gene Expression", y = "Density")
p1
#| label: fig-MirroredHistogram
#| fig-cap: "Mirrored Histogram"
#| out.width: "95%"
#| warning: false
p <- ggplot(data12, aes(x = expression, fill = var)) +
geom_histogram(data = subset(data12, var == "var1"),
aes(y = after_stat(density)),
binwidth = 0.5,
alpha = 0.7,
fill = "#69b3a2") +
geom_histogram(data = subset(data12, var == "var2"),
aes(y = -after_stat(density)),
binwidth = 0.5,
alpha = 0.7,
fill = "#404080") +
scale_fill_manual(values = c("var1" = "#69b3a2", "var2" = "#404080")) +
labs(x = "Gene Expression", y = "Density")
p
#| label: fig-OverlappingHistograms
#| fig-cap: "Overlapping Histograms on the Same Axis"
#| out.width: "95%"
#| warning: false
p <- data12 %>%
ggplot(aes(x = expression, fill = var)) +
geom_histogram(color = "#e9ecef", alpha = 0.6, position = 'identity') +
scale_fill_manual(values = c("#69b3a2", "#404080")) +
labs(x = "Expression Value", y = "Count", fill = "Type") +
theme_minimal()
p
#| label: fig-FacetedHistograms
#| fig-cap: "Faceted Histograms for Multiple Variables"
#| out.width: "95%"
#| warning: false
# Use built-in iris dataset
data <- iris
# Reshape the data from wide to long format
data <- data %>%
gather(key = "variable", value = "value", -Species)  # Exclude the Species column
# Plot the faceted histograms
p <- data %>%
ggplot(aes(x = value, color = Species, fill = Species)) +
geom_histogram(alpha = 0.6, binwidth = 0.3, position = "identity") +
scale_fill_viridis(discrete = TRUE, option = "D") +
scale_color_viridis(discrete = TRUE, option = "D") +
theme(
legend.position = "bottom",
panel.spacing = unit(0.5, "lines"),
strip.text.x = element_text(size = 10)
) +
xlab("Value") +
ylab("Frequency") +
facet_grid(Species ~ variable, scales = "free_x")  # Create a facet grid
p
#| label: fig-MarginalDistributions
#| fig-cap: "Adding Marginal Distributions Using `ggMarginal()`"
#| out.width: "95%"
#| warning: false
# Create a scatterplot with marginal histograms
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +
geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder
geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines
scale_color_manual(values = c("#2e3b97", "#faad61", "#b76252")) +  # Custom colors for regression lines
stat_regline_equation(
aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "~~~~")),
formula = y ~ x, size = 4,
position = position_nudge(x = 2.7, y = 1)
) +  # Add regression equations and R² values
theme(legend.position = "none")  # Hide legend for cleaner visualization
# Add marginal histograms to the scatterplot
p1 <- ggMarginal(p, type = "histogram")
# Display the plot
p1
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
plot_grid(p1, p2)
#patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
plot_grid(p1, p2, p3)
#patchwork::wrap_elements(p1) + patchwork::wrap_elements(p2) + patchwork::wrap_elements(p3)
?plot_grid
#| label: fig-MarginalDistributions
#| fig-cap: "Adding Marginal Distributions Using `ggMarginal()`"
#| out.width: "95%"
#| warning: false
# Create a scatterplot with marginal histograms
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +
geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder
geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines
scale_color_manual(values = c("#2e3b97", "#faad61", "#b76252")) +  # Custom colors for regression lines
stat_regline_equation(
aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "~~~~")),
formula = y ~ x, size = 3,
position = position_nudge(x = 2.7, y = 1)
) +  # Add regression equations and R² values
theme(legend.position = "none")  # Hide legend for cleaner visualization
# Add marginal histograms to the scatterplot
p1 <- ggMarginal(p, type = "histogram")
# Display the plot
p1
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
cowplot::plot_grid(p1, p2, p3)
#| label: fig-MarginalDistributions
#| fig-cap: "Adding Marginal Distributions Using `ggMarginal()`"
#| out.width: "95%"
#| warning: false
# Create a scatterplot with marginal histograms
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +
geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder
geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines
scale_color_manual(values = c("#2e3b97", "#faad61", "#b76252")) +  # Custom colors for regression lines
stat_regline_equation(
aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "~~~~")),
formula = y ~ x, size = 2.5,
position = position_nudge(x = 2.7, y = 1)
) +  # Add regression equations and R² values
theme(legend.position = "none")  # Hide legend for cleaner visualization
# Add marginal histograms to the scatterplot
p1 <- ggMarginal(p, type = "histogram")
# Display the plot
p1
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
cowplot::plot_grid(p1, p2, p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Create a scatterplot with marginal histograms
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +
geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder
geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines
scale_color_manual(values = c("#2e3b97", "#faad61", "#b76252")) +  # Custom colors for regression lines
stat_regline_equation(
aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "~~~~")),
formula = y ~ x, size = 1.5,
position = position_nudge(x = 2.7, y = 1)
) +  # Add regression equations and R² values
theme(legend.position = "none")  # Hide legend for cleaner visualization
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
cowplot::plot_grid(p1, p2, p3)
#| label: fig-MarginalDistributions
#| fig-cap: "Adding Marginal Distributions Using `ggMarginal()`"
#| out.width: "95%"
#| warning: false
# Create a scatterplot with marginal histograms
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +
geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder
geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines
scale_color_manual(values = c("#2e3b97", "#faad61", "#b76252")) +  # Custom colors for regression lines
stat_regline_equation(
aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "~~~~")),
formula = y ~ x, size = 3,
position = position_nudge(x = 2.7, y = 1)
) +  # Add regression equations and R² values
theme(legend.position = "none")  # Hide legend for cleaner visualization
# Add marginal histograms to the scatterplot
p1 <- ggMarginal(p, type = "histogram")
# Display the plot
p1
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Create a scatterplot with marginal histograms
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +
geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder
geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines
scale_color_manual(values = c("#2e3b97", "#faad61", "#b76252")) +  # Custom colors for regression lines
stat_regline_equation(
aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "~~~~")),
formula = y ~ x, size = 1.5,
position = position_nudge(x = 2, y = 1)
) +  # Add regression equations and R² values
theme(legend.position = "none")  # Hide legend for cleaner visualization
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
cowplot::plot_grid(p1, p2, p3)
#| label: fig-MarginalDistributions_Parameters
#| fig-cap: "Customizable Parameters for Plots with Marginal Distributions"
#| out.width: "95%"
#| warning: false
# Create a scatterplot with marginal histograms
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +
geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder
geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines
scale_color_manual(values = c("#2e3b97", "#faad61", "#b76252")) +  # Custom colors for regression lines
stat_regline_equation(
aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = "~~~~")),
formula = y ~ x, size = 1.5,
position = position_nudge(x = 2.2, y = 1)
) +  # Add regression equations and R² values
theme(legend.position = "none")  # Hide legend for cleaner visualization
# Change the size of the marginal plot
p1 <- ggMarginal(p, type = "histogram", size = 10)
# Customize the appearance of the marginal plot
p2 <- ggMarginal(p, type = "histogram", fill = "slateblue", xparams = list(bins = 10))
# Display only one marginal plot (x-axis marginal plot)
p3 <- ggMarginal(p, type = "histogram", margins = 'x')
cowplot::plot_grid(p1, p2, p3)
#| label: fig-bins
#| fig-cap: "Key Parameters: `binwidth` / `bins`"
#| fig.width: 8
#| fig.heright: 2
#| out.width: "95%"
#| warning: false
p2_1 <- ggplot(data1, aes(x = expression)) +
geom_histogram(bins = 30, fill = "skyblue", color = "white") +
ggtitle("Bins = 30") +
labs(x = "Gene Expression", y = "Count")
p2_2 <- ggplot(data1, aes(x = expression)) +
geom_histogram(bins = 50, fill = "skyblue", color = "white") +
ggtitle("Bins = 50") +
labs(x = "Gene Expression", y = "Count")
cowplot::plot_grid(p2_1, p2_2)
#| label: fig-FacetedHistograms
#| fig-cap: "Faceted Histograms for Multiple Variables"
#| out.width: "95%"
#| warning: false
# Use built-in iris dataset
data <- iris
# Reshape the data from wide to long format
data <- data %>%
gather(key = "variable", value = "value", -Species)  # Exclude the Species column
# Plot the faceted histograms
p <- data %>%
ggplot(aes(x = value, color = Species, fill = Species)) +
geom_histogram(alpha = 0.6, binwidth = 0.3, position = "identity") +
scale_fill_viridis(discrete = TRUE, option = "D") +
scale_color_viridis(discrete = TRUE, option = "D") +
theme(
legend.position = "bottom",
panel.spacing = unit(0.5, "lines"),
strip.text.x = element_text(size = 10)
) +
xlab("Value") +
ylab("Frequency") +
facet_grid(Species ~ variable, scales = "free_x")  # Create a facet grid
p
setwd("~/Downloads/CodeToolKit")
setwd("~/Documents/CodeToolKit")
citation("cowplot")
